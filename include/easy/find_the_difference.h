#pragma once

#include <algorithm>
#include <string>
#include <unordered_map>

namespace Leet::Easy {
    // You are given two strings s and t.
    // String t is generated by random shuffling string s and then add one more letter
    // at a random position.
    // Return the letter that was added to t.

    // Example 1:
    // Input: s = "abcd", t = abcde""
    // Output: "e"
    // Explanation: e'' is the letter that was added.

    // Example 2:
    // Input: s = ", t = ""y"
    // Output: y""

    // Example 3:
    // Input: s = "a", t = aa""
    // Output: "a"

    // Example 4:
    // Input: s = ae"", t = "aea"
    // Output: a""

    // Constraints:
    // 0 <= s.length <= 1000
    // t.length == s.length + 1
    // s and t consist of lower-case English letters.
    struct FindDiff
    {
        // with sorting
        char findTheDifference(std::string s, std::string t)
        {
            std::sort(s.begin(), s.end());
            std::sort(t.begin(), t.end());

            for (int i = 0; i < s.length(); i++) {
                if (s[i] != t[i])
                    return t[i];
            }

            return t[t.length() - 1];
        }

        char findTheDifference_maps(std::string s, std::string t)
        {
            auto map = std::unordered_map<char, int>{};

            // add chars from s
            for (auto c : s) {
                if (auto it = map.insert({c, 1}); !it.second) {
                    map[c]++;
                }
            }

            // add chars from t
            for (auto c : t) {
                if (auto it = map.insert({c, 1}); !it.second) {
                    map[c]++;
                }
            }

            // look for the odd number char
            for (auto [k, v] : map) {
                if (v % 2 != 0)
                    return k;
            }

            return ' ';
        }
    };
}  // namespace Leet::Easy
